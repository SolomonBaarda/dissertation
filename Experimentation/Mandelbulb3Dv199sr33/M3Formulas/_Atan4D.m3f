[OPTIONS]
.Version = 2
.DEoption = 4
.DEscale = 1
.SIpower = 4
.Double Px = 0.0
.Double Py = 0.0
.Double Pz = 0.0
.Double Pw = 0.0
.Double a = 1.4
[CONSTANTS]
Double = .500
Double = 0.00001
Double = .250
[CODE]
558BEC53505657908B75088BD88B7E30DD03DC47F0DD1BDD02DC47E8DD1ADD01
DC47E0DD19DD4108DC47D8DD590890DD4108D8C8DD02D8C8DEC1DD01D8C8DEC1
D9FAD9C0DD4708DED9DFE0D0EC90900F83BC000000DD03D9E4DFE080E4509EDD
D890909090751F90909090D9C0D9E8D9E0DEC1D9E1DD4708DED9DFE0D0EC9090
0F838B000000D9C0D9E0D9E8DEC1DD03D9C9D9F3D9C1D9E8DEC1DD03D9E0D9C9
D9F3D9E0DEC1DC0F90D9D090D9C1D9E8DEC1D8C8DD03D8C8DEC1D9C2D9E0D9E8
DEC1D8C8DD03D8C8DEC1DEF9D9EDD9C9D9F1DC4F10D8F2D9D0D9C1DC4FD0DD1B
DD02DC4FD0D8C9DD1ADD01DC4FD0D8C9DD19DD4108DC4FD0D8C9DD5908DDD8DD
D8DDD8DDD890908BC35F5E585B5DC20800DDD8DD03D9E8D9F3DD1BEBE8
[END]

Description:
*** NOTE ***
Too bad, you need to choose a low bailout or a high multiplier: else this formula will not work.
See "_Atanh4D" 's comments. But in my tests this function worked better and showed prettier effects.
Note also that the computations are slowed down a bit (due to the complicate formula, two atan and a log
plus other stuff for each pixel in 3D is not so fast to calculate).

Computes atan(Q+P) * a, following Hamiltonian (non commutative) theory.
Q is a quat that contains in order (x,y,z,w).
P is the phase (to vary a bit the effect)
a is the amplitude. (set this to a value > 1 to force convergence)
This formula should be used with non comm.quaternions but you can use it for everything.

I implemented this code:
	
	Translate x y z w by P at first
	T1 = sqrt(w*w+y*y+z*z);
	if T1 < 0.00001 goto real
	if (x=0)&(T1-1 < 0.00001) goto real
	T2 = (atan(x,1-y) - atan(-x,1+y))*.5
	T3 = ( log(((y+1)^2+x*x)/((1-y)^2+x*x)) )*.25/T1
	x = T2;
	y = T3 * y;
	z = T3 * z;
	w = T3 * w;
	goto end
	real:
	// Real numbers -> shortcut
	x = atan(x)
	end:
	Do a scaling by a