
[OPTIONS]
.Version = 2
.DEscale = 1.5
.SIpower = 2
.Double Power = 8
.Double z-AnglePow = 8
.Double z-Mul = 1
.Integer Mode = 0
.Integer Atan2Mode = 0
[CONSTANTS]
Double = 1
[CODE]
558BEC81EC400000005356578B75088B7E308BD8D9D0DD03D8C8DD02D8C8DD01
D8C8DEC1DEC1D9FADD55F8DD47F0D9C9D9E1D9F1D9E8D9C1D9F8D9F0DEC1D9FD
D9C9DDD8DD5DF0DD02D8C8DD01D8C8DEC1D9FADD55E8DD03D9F3DC4FF0D9FBDD
5DD8DD5DE090DD02DD01D9F3DC4FE8D9FBDD5DC8DD5DD0D9D0DD45E0DC
4DF0DC4618DD1BDD45D8DC4DD0DC4DF0DC4620DD1ADD45D8DC4DC8DC4FE0DC4DF0DC46
28DD19D9D08BC35F5E5B8BE55DC20800
[END]

Description:
This formula was proposed by Inigo Quilez in 2009 as a "correction" of Mandelbulb formula.
http://iquilezles.org/www/articles/mandelbulb/mandelbulb.htm

sq_r := sqrt(x*x+y*y+z*z)
sq_xz := sqrt(x*x+z*z)
r:= sq_r ^ Power

theta  = acos(y/sq_r) * P = atan2( sq_xz , y) * P
// This is true everywhere, because sq_r is >=0 ; atan2(a,b) differs from atan(a/b) when b<0
// I must use atan2 because 'acos' is missing in assembly.
zangle = atan2(x,z)  * zAP

x := sin(zangle)*sin(theta)*r+Cx
y := cos(theta)            *r+Cy
z := sin(theta)*cos(zangle)*r+Cz

Implemented by Luca G.N. 2011


01007010   55               PUSH EBP
01007011   8BEC             MOV EBP,ESP
01007013   81EC 40000000    SUB ESP,40
01007019   53               PUSH EBX
0100701A   56               PUSH ESI
0100701B   57               PUSH EDI
0100701C   8B75 08          MOV ESI,DWORD PTR SS:[EBP+8]
0100701F   8B7E 30          MOV EDI,DWORD PTR DS:[ESI+30]
01007022   8BD8             MOV EBX,EAX
01007024   D9D0             FNOP
01007026   DD03             FLD QWORD PTR DS:[EBX]
01007028   D8C8             FMUL ST,ST			// x^2  stack = 1
0100702A   DD02             FLD QWORD PTR DS:[EDX]
0100702C   D8C8             FMUL ST,ST			// y^2  stack = 2
0100702E   DD01             FLD QWORD PTR DS:[ECX]
01007030   D8C8             FMUL ST,ST			//z*z   stack = 3
01007032   DEC1             FADDP ST(1),ST		//y^2+z^2  stack = 2
01007034   DEC1             FADDP ST(1),ST		//x^2+y^2+z^2  stack=1
01007036   D9FA             FSQRT
01007038   DD55 F8          FST QWORD PTR SS:[EBP-8]      // r=EBP-8    r on top of stack

0100703B   DD47 F0          FLD QWORD PTR DS:[EDI-10]	  //  what is EDI 10 again??     EDI-10 is power!@$!@$
0100703E   D9C9             FXCH ST(1)			// r on top
01007040   D9E1             FABS			// abs  abs (r)
01007042   D9F1             FYL2X			//log_2 (r)
01007044   D9E8             FLD1			// load value 1 to top of stack      3 on
01007046   D9C1             FLD ST(1)			// load r to top			4 on stack
01007048   D9F8             FPREM			// remainder of r/1  	4 on stack
0100704A   D9F0             F2XM1			// ST(0) *2 -1
0100704C   DEC1             FADDP ST(1),ST		// st(0)*2 			3 on stack
0100704E   D9FD             FSCALE			//  st(0) * 2 st(1)   //truncates st(1) to integer downwards
							//  st(1) 2 on stack

01007050   D9C9             FXCH ST(1)			//  necessary???   2 on stack
01007052   DDD8             FSTP ST			//  st=st(1)???
01007054   DD5D F0          FSTP QWORD PTR SS:[EBP-10]  //  EBP-10 = above???  r^power


01007057   DD02             FLD QWORD PTR DS:[EDX]	// load y
01007059   D8C8             FMUL ST,ST			//  y*Y   
0100705B   DD01             FLD QWORD PTR DS:[ECX]	// load z    
0100705D   D8C8             FMUL ST,ST			// z*z
0100705F   DEC1             FADDP ST(1),ST		//  y*y+z*z
01007061   D9FA             FSQRT			// sqrt( xxx)    stack only 1
01007063   DD55 E8          FST QWORD PTR SS:[EBP-18]	//  ebp-18 = R2

01007066   DD03             FLD QWORD PTR DS:[EBX]	//  load x	stack 2


01007068   D9F3             FPATAN			//  atab (st(1)/st(0)) == atan (x/r2)  stack 1
0100706A   DC4F F0          FMUL QWORD PTR DS:[EDI-10]	//  ..  * EDI-10=power * theta  
0100706D   D9FB             FSINCOS			// cos (..) , sin (...)   stack 2
0100706F   DD5D D8          FSTP QWORD PTR SS:[EBP-28]	//  ebp-28 = cos(theta)   stack 1


01007072   DD5D E0          FSTP QWORD PTR SS:[EBP-20]  //  ebp-20 = sin (..) stack empty


01007075   90               NOP
01007076   DD02             FLD QWORD PTR DS:[EDX]	// load y


01007078   DD01             FLD QWORD PTR DS:[ECX]	// load z
0100707A   D9F3             FPATAN			// atan (y/z)
0100707C   DC4F E8          FMUL QWORD PTR DS:[EDI-18]	// zanglepower * atan(y/z)  ???
0100707F   D9FB             FSINCOS			// 
01007081   DD5D C8          FSTP QWORD PTR SS:[EBP-38]	// EBP-38 = cos (...)
01007084   DD5D D0          FSTP QWORD PTR SS:[EBP-30]	// EBP-30 = sin (...)   stack empty
01007087   D9D0             FNOP


01007089   DD45 E0          FLD QWORD PTR SS:[EBP-20]	//  cos (theta)

0100708C   DC4D D0          FMUL QWORD PTR SS:[EBP-30]	//  *cos (phi)   // took this out

558BEC81EC400000005356578B75088B7E308BD8D9D0DD03D8C8DD02D8C8DD01
D8C8DEC1DEC1D9FADD55F8DD47F0D9C9D9E1D9F1D9E8D9C1D9F8D9F0DEC1D9FD
D9C9DDD8DD5DF0DD02D8C8DD01D8C8DEC1D9FADD55E8DD03D9F3DC4FF0D9FBDD
5DD8DD5DE090DD02DD01D9F3DC4FE8D9FBDD5DC8DD5DD0D9D0DD45E0DC
4DF0DC4618DD1BDD45D8DC4DF0DC4620DD1ADD45E0DC4DC8DC4FE0DC4DF0DC46
28DD19D9D08BC35F5E5B8BE55DC20800


0100708F   DC4D F0          FMUL QWORD PTR SS:[EBP-10]	// * r^power
01007092   DC46 18          FADD QWORD PTR DS:[ESI+18]	// + xpixel
01007095   DD1B             FSTP QWORD PTR DS:[EBX]	//  save new x     stack empty


01007097   DD45 D8          FLD QWORD PTR SS:[EBP-28]	//  load sin (theta)    // add cos phi after this!

done

558BEC81EC400000005356578B75088B7E308BD8D9D0DD03D8C8DD02D8C8DD01
D8C8DEC1DEC1D9FADD55F8DD47F0D9C9D9E1D9F1D9E8D9C1D9F8D9F0DEC1D9FD
D9C9DDD8DD5DF0DD02D8C8DD01D8C8DEC1D9FADD55E8DD03D9F3DC4FF0D9FBDD
5DD8DD5DE090DD02DD01D9F3DC4FE8D9FBDD5DC8DD5DD0D9D0DD45E0DC
4DF0DC4618DD1BDD45D8DC4DD0DC4DF0DC4620DD1ADD45E0DC4DC8DC4FE0DC4DF0DC46
28DD19D9D08BC35F5E5B8BE55DC20800

0100709A   DC4D F0          FMUL QWORD PTR SS:[EBP-10]  // * r^power
0100709D   DC46 20          FADD QWORD PTR DS:[ESI+20]  //  + y pixel
010070A0   DD1A             FSTP QWORD PTR DS:[EDX]	//  save new y


558BEC81EC400000005356578B75088B7E308BD8D9D0DD03D8C8DD02D8C8DD01
D8C8DEC1DEC1D9FADD55F8DD47F0D9C9D9E1D9F1D9E8D9C1D9F8D9F0DEC1D9FD
D9C9DDD8DD5DF0DD02D8C8DD01D8C8DEC1D9FADD55E8DD03D9F3DC4FF0D9FBDD
5DD8DD5DE090DD02DD01D9F3DC4FE8D9FBDD5DC8DD5DD0D9D0DD45E0DC
4DF0DC4618DD1BDD45D8DC4DD0DC4DF0DC4620DD1ADD45D8DC4DC8DC4FE0DC4DF0DC46
28DD19D9D08BC35F5E5B8BE55DC20800

DD45 D8
010070A2   DD45 E0          FLD QWORD PTR SS:[EBP-20]	//  cos (theta)  // change to sin theta   done
010070A5   DC4D C8          FMUL QWORD PTR SS:[EBP-38]	//  * sin (phi)
010070A8   DC4F E0          FMUL QWORD PTR DS:[EDI-20]	// * double z multiple???
010070AB   DC4D F0          FMUL QWORD PTR SS:[EBP-10]	//  * r^power
010070AE   DC46 28          FADD QWORD PTR DS:[ESI+28]	// +z pixel
010070B1   DD19             FSTP QWORD PTR DS:[ECX]	// save to z


010070B3   D9D0             FNOP
010070B5   8BC3             MOV EAX,EBX
010070B7   5F               POP EDI
010070B8   5E               POP ESI
010070B9   5B               POP EBX
010070BA   8BE5             MOV ESP,EBP
010070BC   5D               POP EBP
010070BD   C2 0800          RETN 8
010070C0   0000             ADD BYTE PTR DS:[EAX],AL

