[OPTIONS]
.Version = 2
.DEoption = -1
.Double Scale = 2.0
.Double xOff = 2.0
[CONSTANTS]
Double = 0.816496580927726      
Double = 0.5773502691896258
Double = 0.7071067811865475
Double = 0.8660254037844387
Double = 0.5
[CODE]
558BEC81EC300000005356578B75088B7E308BD8D9D0DD03DC4F20DD4108
DC4F18DEC1D9E1DD5DE890DD03DC4F18DD4108DC4F20D9E0DEC1DD55F0
DC0FDD01DC4F08D9E0DEC1DC4F10DD5DF8DD45F0DC4F08DD01DC0FDEC1
D9E190DD45F8DD02DC4F10D9E0DEC1D9E190DD45F8DD02DC4F10DEC1D9E1
90DD1ADD1BDD1990DD03DC02DC4F10DD5DF890DD03D9E0DC02DC4F10DD1AD9D090DD45F8DC0F
DD01DC4F08DEC1DD55F090DD45F8DC4F08D9E0DD01DC0FDEC190DD19DC4F
20D9E0DD45E8DC4F18DEC1DD5908D9D0DD45F0DC4F18DD45E8DC4F20DEC1
DC4FF0DC67E8DD1B90DD02DC4FF0DD1A90DD01DC4FF0DD1990D9D08BC35F5E5B89EC5DC20800
[END]


Description:
Description:  This isn't very different from the 3d version of Transform 1.  The 3d version is better because it is faster.. although in the future, higher dimensional versions might become more interesting as processing power increases.  

 Rotate from x (-1,0,0,0)-->(1,0,0,0) to "mag axis" (-1,-1,-1,-1) --> (1,1,1,1)
 Take absolute value of variables
 Rotate back to x axis;
 scale and add in offset


new w=abs(x*sqrt(1/4) + w*sqrt(3/4));  //  (yes... sqrt of 1/4 is... 1/2 !@#!)
x= x*sqrt(3/4) - w/2;    //  yup...
tx=(x*sqrt(2/3)-z*sqrt(1/3))*sqrt(1/2);
z=abs(x*sqrt(1/3) + z*sqrt(2/3));   	
x=abs(tx-y*sqrt(1/2));          
y=abs(tx+y*sqrt(1/2));

 
tx=x*sqrt(1/2)+y*sqrt(1/2);
y=-x*sqrt(1/2)+y*sqrt(1/2); 
x=tx*sqrt(2/3)+z*sqrt(1/3);
z=-tx*sqrt(1/3)+z*sqrt(2/3);	
tx=x*sqrt(3/4)+w*sqrt(1/4);  //.5!#!@#
w=-x*sqrt(1/4) +w*sqrt(3/4);


x=scale*tx-offset;  //scale =2    offset=2       
y=scale*y;
z=scale*z;
w=scale*w;
Rotate towards mag WITH ABS  (D9E1):


:D  

  M Benesi