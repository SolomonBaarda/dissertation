[OPTIONS]
.Version = 2
.DEoption = 4
.DEscale = 1
.SIpower = 4
[CONSTANTS]
Double = 1e-200
[CODE]
558BEC56538B75088BD88B7630DD4108D8C8DD02D8C8DEC1DD01D8C8DEC1D9FA
D9C0D9FBD9D0DD03D9EADEC9D9E8D9C1D9F8D9F0DEC1D9FDD9C9DDD8D9C0D8CA
DD1BD8CAD9C3DD06DED9DFE080E4417402D8F3DD02D8C9DD1ADD01D8C9DD19DD
4108D8C9DD5908DDD8DDD8DDD8DDD8908BC35B5E5DC20800
[END]

Description:

Computes exp(Q), following Hamiltonian theory, exact for all Q except for (Re(Q)>0 & Re(Q)<1e-200).
Q is a quat that contains in order (x,y,z,w).
Remember that log(exp(Q)) = Q but exp(log(Q)) *generally* is not Q due to non unicity of log().
The identity is valid only in "zones near to origin".
exp(P*log(Q)) = Q ^ P so with those function you can raise Q to arbitrary powers (if Q belongs to the interval).
Enormous thanks to Dirk Meyer for the basic code!

Enormous thanks to Dirk Meyer for the basic code!
Enormous thanks to "ArtNouveaU Tiny Library" (1997) for the fast assembly implementation of exp() function!

I implemented this code:

	T1 = sqrt(w*w+y*y+z*z);
        calculate sin,cos of T1;
	T2 = exp(x);
	x = T2*cos(T1);
        T2 = T2*sin(T1);
	if (T1 > 1e-200) T2 = T2/T1;
	y = T2*y;
	z = T2*z;
	w = T2*w;