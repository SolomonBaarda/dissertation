[OPTIONS]
.Version = 5
.DEoption = 4
.DEscale = 1
.SIpower = 2
.Double dx = 1
.Double dy = 0
.Double dz = 0
.Double dw = 0
[CODE]
558BEC53505657908B75088BD88B7E30DD0390DC0BD9E090DD0290DC0A909090
DEC1DD0190DC09909090DEC1DD4108DC4908D9E0DEC1DC47F0D9D0DD0390DC0A
D9E090D8C0DD0190DC49089090D8C0DEC1DC47E8D9D0DD0390DC09D9E090D8C0
DD0290DC49089090D8C0DEC1DC47E0D9D0DD0390DC4908D9E0D8C0DD0290DC09
D9E090D8C0DEC1DC47D8D9D0DD5908DD19DD1ADD1BDD0390DC4E189090DD0290
DC4E20D9E0DEC1DD0190DC4E28D9E0DEC1DD4108DC4EC89090DEC1D9D0DD0290
DC4E189090DD0390DC4E209090DEC1DD4108DC4E28D9E0DEC1DD0190DC4EC8D9
E0DEC1D9D0DD0190DC4E189090DD4108DC4E20D9E0DEC1DD0390DC4E289090DE
C1DD0290DC4EC8D9E0DEC1D9D0DD4108DC4E189090DD0190DC4E209090DEC1DD
0290DC4E289090DEC1DD0390DC4EC89090DEC1D9D090DD5908DD19DD1ADD1B90
8BC35F5E585B5DC20800
[END]

This is a 4-D extension of the (generalized and approximated) Lambda formula. Not the same as the real Lambda but close.
This implementation uses a commutative quat product, I found the formula here; http://home.comcast.net/~cmdaven/hyprcplx.htm

Lambda commutative 4D formula (approximate, not the exact Lambda formula)
----------------
S is the quaternion that contains (x,y,z,w).
K is the quaternion that contains (dx,dy,dz,dw).
C is the quaternion that contains (Cx,Cy,Cz,Cw).
Defining quat multiplication as follows (commutative rule);
A q* B := ( Ax Bx - Ay By - Az Bz + Aw Bw , Ay Bx + Ax By - Aw Bz - Az Bw ,  Az Bx - Aw By + Ax Bz - Ay Bw , Aw Bx + Az By + Ay Bz + Ax Bw)
A + B  := ( Ax + Bx , ... , Aw + Bw ) term by term sum
----------------

S' = ( K - S q* S ) 
Note that S q* S = (x^2-y^2-z^2-w^2,2xy,2xz,2wx)
S'' = S' q* C

----------------
FORMULA AND IMPLEMENTATION; 100% by Luca G.N. 2011.