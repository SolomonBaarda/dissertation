[OPTIONS]
.Version = 2
.DEoption = 4
.DEscale = 1
.SIpower = 4
.Double Mulx = 2.0
.Double Muly = 0.0
.Double Mulz = 0.0
.Double Mulw = 0.0
.Double Final Mul = 1.0
[CONSTANTS]
Double = 1e-200
[CODE]
558BEC53505657908B75088BD88B7E30DD0390DC4FF09090DD0290DC4FE8D9E0
DEC1DD0190DC4FE0D9E0DEC1DD4108DC4FD8D9E0DEC1D9D0DD0390DC4FE89090
DD0290DC4FF09090DEC1DD0190DC4FD89090DEC1DD4108DC4FE0D9E0DEC1D9D0
DD0390DC4FE09090DD0290DC4FD8D9E0DEC1DD0190DC4FF09090DEC1DD4108DC
4FE89090DEC1D9D0DD0390DC4FD89090DD0290DC4FE09090DEC1DD0190DC4FE8
D9E0DEC1DD4108DC4FF09090DEC1D9D090DD5908DD19DD1ADD1BDD4108D8C8DD
02D8C8DEC1DD01D8C8DEC1D9FAD9C0D9FBD9D0DD03D9EADEC9D9E8D9C1D9F8D9
F0DEC1D9FDD9C9DDD8D9C0D8CADD1BD8CAD9C3DD07DED9DFE080E4417402D8F3
DD02D8C9DD1ADD01D8C9DD19DD4108D8C9DD5908DDD8DDD8DDD8DDD890DD4108
D8C8DD02D8C8DEC1DD01D8C8DEC1DD03D9E8DEC1D8C8DEC1D9E8DEF1D9D0DD03
D9E8DEC1DD03D9E8D9E0DEC1DEC9DD02D8C8DEC1DD01D8C8DEC1DD4108D8C8DE
C1D9D0DD03D9E8DEC1DC0ADD02DD03D9E8D9E0DEC1DEC9D9E0DEC1D9D0DD03D9
E8DEC1DC09DD03D9E8D9E0DEC1DC09D9E0DEC1D9D0DD03D9E8DEC1DC4908DD03
D9E8D9E0DEC1DC4908D9E0DEC1D9D0D9C4D8CCDC4FD0DD1BD9C4D8CBDC4FD0DD
1AD9C4D8CADC4FD0DD19D9C4D8C9DC4FD0DD5908DDD8DDD8DDD8DDD8DDD88BC3
5F5E585B5DC20800
[END]

Description:

*WARNING* - Too bad, this function is actually almost useless, even if the 2D slices
look pretty. (Also, AFAIK, use it as a pre-transform is not a good idea.) Why?
This is due to the "nature" of the function itself, because the function is numerically
accurate (compared with UltraFractal's tanh, gives the same results for z=w=0 and default settings).
tanh is convergent for "big" values of the argument, and convergent functions
are NOT supported by Mandelbulb3D for now. (DE works for "divergent" fractals only).
The only way to avoid this is setting low pre-muls and a high final mul.
But this destroys the effect of the function itself - and leads to noisy images. Useless again!
The only way to use it seems to be: use low bailouts. Same issues of the previous.
I release it for experimental purposes or for future use only.
--------------------------------------------

This is the definition of the function tanh:

tanh(x) := (exp(2*x)-1)/(exp(2*x)+1) (alternate definition - I use this for speed reasons)

tanh is a "sigmoid" type function (see Wikipedia) 

This function computes f*tanh(Q q* M / 2), following Hamiltonian theory, exact for all Q except for (Re(Q)>0 & Re(Q)<1e-200).
Q is a quat that contains in order (x,y,z,w).
In other words we do this

tanh(Q) := final * (exp(Q q* M)-1) q/ (exp(Q q* M)+1)

See _Exp4D for the details of the exponentiation function.