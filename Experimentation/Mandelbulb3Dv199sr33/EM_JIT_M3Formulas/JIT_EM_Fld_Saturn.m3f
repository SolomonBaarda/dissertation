[OPTIONS]
.DEScale = 0.5
.SIPow = 2
.Version = 9
.Double AdditionW = 0
.Double Fold = 1
.Double Scale = 2
.Double vAdditionX = 0
.Double vAdditionY = 0
.Double vAdditionZ = 0
[SOURCE]
procedure FldSaturn(var x, y, z, w: Double; PIteration3D: TPIteration3D);
var
   x1, y1, z1, w1: double;

intFold: integer;

begin

///Folding
///This step is necessary, as floats interfere with formula and generates something else.
	intFold:=round(Fold);
x := x + abs(x-intFold) - abs(x+intFold); 
y := y + abs(y-intFold) - abs(y+intFold);
z := z + abs(z-intFold) - abs(z+intFold);
w := w + abs(w-intFold) - abs(w+intFold);

x:=x* Scale;
y:=y* Scale;
z:=z* Scale;
w:=w* Scale;

///Addition, new version - julia set like
x1 := x + vAdditionX ; 
y1 := y + vAdditionY ;
z1 := z + vAdditionZ ;
w1 := w + AdditionW ;


//==============================================
///cosmic transformation? 
//From an attempt of hypercomplex sinh fold - that was too slow

x:= ( x1-w1 + y1+z1 )*0.5;
y:= ( x1+w1 + y1-z1 )*0.5;
z:= ( x1+w1 - y1+z1 )*0.5;
w:= ( y1+z1 - x1+w1 )*0.5;


//====================================

// Crystal version of power 2
// in 2D it's split complex numbers
x1 := x*x + y*y + z*z + w*w;
y1 := 2*x*y ;
z1 := 2*x*z ;
w1 := 2*w*x ;
 
//===================================

///quaternion raising in power 3.  
x:=x1*x1*x1 - 3*x1*y1*y1 - 3*x1*z1*z1 - 3*x1*w1*w1;
y:=3*x1*x1*y1 - y1*y1*y1 - y1*z1*z1 - y1*w1*w1; 
z:=3*x1*x1*z1 - y1*y1*z1 - z1*z1*z1 - z1*w1*w1;
w:=3*x1*x1*w1 - y1*y1*w1 - z1*z1*w1 - w1*w1*w1;



end;
[END]
Formula version 1.1

4D
Looks like Saturn.

flds with additional 4D transformation:
x1:= ( x-w + y+z )*0.5;
y1:= ( x+w + y-z )*0.5;
z1:= ( x+w - y+z )*0.5;
w1:= ( y+z - x+w )*0.5;

Then split complex power 2 and quaternion power 3 thus resulting power 6. So slightly simmilar to Gilgamesh Head formula.

 * * *
By Edgar Malinovsky
