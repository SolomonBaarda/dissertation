[OPTIONS]
.DEScale = 0.9
.SIPow = 2
.Version = 9
.Double AdditionZ = 0
.Double Fold = 1
.Double Power_ = 2
.Double Scaleing = 2.5
.Double vAdditionX = 0
.Double vAdditionY = 0
[SOURCE]
procedure FoldBoxbulb(var x, y, z, w: Double; PIteration3D: TPIteration3D);
var
   sq_r: double;
   sq_xz: double;
   r, theta, zangle: double;
   x1,y1,z1: double;
intFold: integer;
begin

///This step is necessary, as floats interfere with formula and generates something else.
intFold:=round(Fold);
x := x + abs(x- intFold) - abs(x+ intFold); 
y := y + abs(y- intFold) - abs(y+ intFold);
z := z + abs(z- intFold) - abs(z+ intFold);

x:=x* Scaleing;
y:=y* Scaleing;
z:=z* Scaleing;


//===================================================
///Addition, new version - julia set like
x := x + vAdditionX ; 
y := y + vAdditionY ;
z := z + AdditionZ ;


//=============================================
//Now starts bulb

// supermodulus of power 4
x1:= x*x*x*x;
y1:= y*y*y*y;
z1:= z*z*z*z;
// box - pillow
   sq_r := Power(x1+y1+z1 , 0.25);
   sq_xz := Power(x1+z1 , 0.25);



//==================================================================
// conditionals used to speed up calculation with certain values
if Power_ = 2 then
	begin
	 		
   r:= sq_r*sq_r;

   theta := arctan2( sq_xz , y) * 2;
   zangle := arctan2(x,z)  * 2;

	end
  	else
	begin

// else calculate in full hard way

   r:= power(sq_r, Power_);

   theta := arctan2( sq_xz , y) * Power_;
   zangle := arctan2(x,z)  * Power_;

	end;



   x := sin(zangle)*sin(theta)*r ;
   y := cos(theta)            *r ;
   z := sin(theta)*cos(zangle)*r ;

end;
[END]
Formula version 1.3

Folds pillow like mandelbulb shapes.
Relatively slow
